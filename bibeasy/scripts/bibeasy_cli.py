#!/usr/bin/env python3
#
# Main CLI function that calls other bibeasy sub-functions.
#
# Author: Julien Cohen-Adad

# TODO: add feature to merge several subtypes into single subtype
# TODO: add feature to merge multiple googlesheet sources (e.g. Julien and Nikola)
# TODO: add feature to separate conference papers
# TODO: Add * for supervised students

import coloredlogs

from bibeasy.utils import *
from bibeasy.gsheet import *

PUBTYPES = ['article', 'nonreferred', 'conf-article', 'conf-proc', 'talk', 'bookchapter', 'patent', 'media', 'nikola']

def get_parameters():
    parser = argparse.ArgumentParser(
        description="This script is used to format publications from GoogleSheet, and for doing cross-referencing "
                    "publication index between GoogleSheet and the XML-generated Canadian Common CV (CCV).",
        epilog="""\
Example usage:
--------------

Format GoogleSheet references for Word:
bibeasy -o publis.docx

Remove publication older than 2015:
bibeasy -o publi.docx -y 2015

Format citation in APA style.
bibeasy -o publi.docx -st APA

Only keep entries with 'x' for the column IVADO17.
bibeasy -o publi.docx -f IVADO17  # Only keep entries with 'x' for the column IVADO17.

Format for NeuroPoly's website (reverse order, re-download Gsheet, combined in single doc, check authorized labels):
bibeasy -o publis.md --type article conf-article --reverse --freshen-cache --combine --check-labels

Display reference from input list:
bibeasy -i [J34, J67, C124]
bibeasy -i input.txt

Cross-reference publication index between GoogleSheet and CCV
bibeasy -x REF.XML

Replace GoogleSheet by CCV index in input text, excluding refs older than 2014:
bibeasy -x REF-CCV.XML -i INPUT.TXT -y 2014

Replace CCV by most recently updated GoogleSheet index in input text, sort replaced references, using the most recent version latest data:
bibeasy --freshen-cache -x REF-CCV.XML -i INPUT.TXT -g -s

Only output a list of CCV publications that correspond to the filter tag FILTER.
bibeasy -x REF-CCV.xml -f FILTER

Convert reference ID from one CCV version to another CCV version.
bibeasy -x REF-CCV-SRC.XML --xml-dest REF-CCV-DEST.XML
""",
        formatter_class=SmartFormatter)
    parser.add_argument("-S", "--sync",
                        help="Copy contents of GoogleSheet into CCV XML file.",
                        action='store_true')
    parser.add_argument("-c", "--freshen-cache",
                        help="Redownload cached GoogleSheet.",
                        action='store_true')
    parser.add_argument("-x", "--xml",
                        help="XML file (generated by CCV website).",
                        required=False)
    parser.add_argument("-xd", "--xml-dest",
                        help="XML destination file that will be used to match the other XML (specified by -x).",
                        required=False)
    parser.add_argument("-i", "--input",
                        help="Text file which contains references, listed as: '[J12, J13, C8], [J74]', where 'J' "
                             "corresponds to journal publications and 'C' corresponds to conference proceedings.",
                        nargs='+',
                        required=False)
    parser.add_argument("-g", "--to-gsheet",
                        help="Convert reference index from CCV to GoogleSheet (instead of the default behaviour: "
                             "GoogleSheet to CCV).",
                        action='store_true')
    parser.add_argument("-t", "--type",
                        help="Publication type",
                        nargs='+',
                        choices=PUBTYPES,
                        default=PUBTYPES,
                        required=False)
    parser.add_argument("-o", "--output",
                        help="Text file to output with converted fields in the following format: [3], [5]. The "
                             "extension will determine how to format the publication list. Choices are: "
                             "'md' for NeuroPoly's website; 'docx' for word-formatted CV. Example: '-o publis.docx'",
                        required=False)
    parser.add_argument("-st", "--style",
                        help="Citation syle.",
                        choices=['APA', 'custom', 'talk'],
                        default='custom')
    parser.add_argument("-cb", "--combine",
                        help="Combine all reference types into a single document.",
                        action='store_true')
    parser.add_argument("-f", "--filter",
                        help="Name of a column in the PUBLIS-GSHEET file, which has an 'x' for each row that should be "
                             "selected and listed in the terminal output, with format: [3, 5, 14]",
                        required=False)
    parser.add_argument("-y", "--min-year",
                        help="Only select references that are superior or equal to the specified year.",
                        type=int,
                        required=False)
    parser.add_argument("-r", "--reverse",
                        help="Reverse sorting of GoogleSheet list.",
                        action='store_true')
    parser.add_argument("-s", "--sort-refs",
                        help="Sort references after replacement.",
                        action='store_true')
    parser.add_argument("-l", "--labels",
                        help="Location of labels_publication.txt",
                        type=str,
                        required=True)
    parser.add_argument("-cl", "--check-labels",
                        help="If a 'Labels' column is present, check if they correspond to labels defined in: "
                             "https://github.com/neuropoly/neuro.polymtl.ca/blob/master/publications/label_definitions.md"
                             "Note that his only concerns the formatting for NeuroPoly's website.",
                        action='store_true')
    parser.add_argument("-v", "--verbose",
                        help="Full verbose (for debugging).",
                        action='store_true')
    return parser.parse_args()


def main():
    args = get_parameters()

    # Initialize colored logging
    # Note: coloredlogs.install() replaces logging.BasicConfig()
    if args.verbose:
        coloredlogs.install(fmt='%(message)s', level='DEBUG')
    else:
        coloredlogs.install(fmt='%(message)s', level='INFO')

    if args.input:
        inputref = fix_input_ref(args.input)

    # Read XML file (CCV references)
    if args.xml:
        df_ccv = xml_to_df(args.xml)

    # If second XML is provided, compare two versions
    if args.xml_dest:
        df_dest = xml_to_df(args.xml_dest)
        replace_ref_in_text(df_ccv, df_dest, inputref, args.sort_refs)

    # Otherwise, do something else
    else:
        # Fetch GoogleSheet publication records
        df_csv = gsheet_to_df(args)

        if args.sync:
            if not args.xml:
                raise ArgumentError("--sync needs to be used with -x")

            sync(df_csv, args.xml)
            return

        # Find matching refs between GoogleSheet and CCV publications
        if args.xml:
            find_matching_ref(df_csv, df_ccv, args.type)

            # Replace references between GoogleSheet and CCV
            if args.input:
                if args.to_gsheet:
                    replace_ref_in_text(df_ccv, df_csv, inputref, args.sort_refs)
                else:
                    replace_ref_in_text(df_csv, df_ccv, inputref, args.sort_refs)

        else:
            if args.input:
                display_ref(df_csv, inputref)

        # Write GoogleSheet into formatted text
        if args.output:
            csv_to_txt(df_csv, args)


if __name__ == '__main__':
    main()
